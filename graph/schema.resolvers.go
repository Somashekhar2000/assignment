package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"assignment/graph/model"
	"context"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := model.User{
		ID:               input.ID,
		FirstName:        input.FirstName,
		LastName:         input.LastName,
		Age:              input.Age,
		Gender:           input.Gender,
		Dob:              input.Dob,
		Mobile:           input.Mobile,
		Email:            input.Email,
		PermanentAddress: input.PermanentAddress,
	}
	return r.S.CreateUser(user)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	return r.S.UpdateUser(input)
}

// FetchUser is the resolver for the fetchUser field.
func (r *queryResolver) FetchUser(ctx context.Context) ([]*model.User, error) {
	return r.S.GetAllUser()
}

// FetchUserByID is the resolver for the fetchUserByID field.
func (r *queryResolver) FetchUserByID(ctx context.Context, id int) (*model.User, error) {
	return r.S.GetUserByID(id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
